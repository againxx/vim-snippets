###########################################################################
#                            Global functions                             #
###########################################################################

global !p
from c_snippets import (get_left_curly_brace_style, get_right_curly_brace_style)
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define $1
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(${2:int argc, char *argv[]})`!p get_left_curly_brace_style(snip)`
	${1:${VISUAL}}$0
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${5:std::size_t} ${1:i} = 0; $1 < ${2:count}; ${3:++$1})`!p get_left_curly_brace_style(snip)`
	${4:${VISUAL}}$0
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet while "while {}"
while (${1:/* condition */})`!p get_left_curly_brace_style(snip)`
	${2:${VISUAL}}$0
}
endsnippet

snippet if "if {}"
if (${1:/* condition */})`!p get_left_curly_brace_style(snip)`
	${2:${VISUAL}}$0
}
endsnippet

snippet ifs "if single line"
if (${1:/* condition */})
	${2:${VISUAL}}
endsnippet

snippet "el(se)?" "else {}" br
else`!p get_left_curly_brace_style(snip)`
	${1:${VISUAL}}$0
}
endsnippet

snippet elw "else"
else
	${VISUAL}$0
endsnippet


snippet ife "if {} else {}"
if (${1:/* condition */})`!p get_left_curly_brace_style(snip)`
	${VISUAL}$2
`!p get_right_curly_brace_style(snip, "else")`
	${VISUAL}$0
}
endsnippet

snippet eif "else if {}"
else if (${1:/* condition */})`!p get_left_curly_brace_style(snip)`
	${VISUAL}$0
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}`!p get_left_curly_brace_style(snip)`
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)`!p get_left_curly_brace_style(snip)`
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

# vim:ft=snippets:
