# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet cmin "cmake_minimum_required" b
cmake_minimum_required(VERSION ${1:`cmake --version | sed -nE '/cmake[[:space:]]*version/s/cmake[[:space:]]*version[[:space:]]*([0-9]+\.[0-9]+).*/\1/p'`})
endsnippet

snippet proj "project" b
project(${1:project_name}
	VERSION ${2:0.1}
	DESCRIPTION "${3:description}"
	LANGUAGES CXX${4: CUDA}
)
endsnippet

snippet compile "export compile_commands.json" b
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
endsnippet

snippet pvar "print variable" b
include(CMakePrintHelpers)
cmake_print_variables($2${1:_LIBRARIES})
endsnippet

snippet pprop "print properties" b
include(CMakePrintHelpers)
cmake_print_properties(
	TARGETS ${1:target1}
	PROPERTIES $0
)
endsnippet

snippet gtest "populate gtest content" b
include(FetchContent)
FetchContent_Declare(
	googletest
	GIT_REPOSITORY https://github.com/google/googletest.git
	GIT_TAG        release-1.10.0
)
FetchContent_MakeAvailable(googletest)

enable_testing()

add_executable(${1:test}
	${2:$1}.cpp
)

target_link_libraries($1
	PRIVATE
		${3:gtest_main}
)

include(GoogleTest)
gtest_discover_tests($1)

endsnippet

# vim: set ft=snippets foldmarker={{,}} foldmethod=marker:
