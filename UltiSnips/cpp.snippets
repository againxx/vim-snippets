priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#                            Global functions                             #
###########################################################################

global !p

from c_snippets import (get_left_curly_brace_style, get_right_curly_brace_style)

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]

endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}`!p get_left_curly_brace_style(snip)`
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}`!p get_left_curly_brace_style(snip)`
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> $0
endsnippet

snippet uniptr "std::unique_ptr"
std::unique_ptr<${1:char}> $2($3);
endsnippet

snippet cout "std::cout << '\n'"
std::cout << ${VISUAL}$1 << ${2:'\n'};
endsnippet

snippet cerr "std::cerr"
std::cerr << $0 << '\n';
endsnippet

snippet rdeb "ROS_DEBUG"
ROS_DEBUG($0)
endsnippet

snippet rdebs "ROS_DEBUG_STREAM"
ROS_DEBUG_STREAM($0)
endsnippet

snippet rinfo "ROS_INFO"
ROS_INFO($0)
endsnippet

snippet rinfos "ROS_INFO_STREAM"
ROS_INFO_STREAM($0)
endsnippet

snippet rwarn "ROS_WARN"
ROS_WARN($0)
endsnippet

snippet rwarns "ROS_WARN_STREAM"
ROS_WARN_STREAM($0)
endsnippet

snippet rerr "ROS_ERROR"
ROS_ERROR($0)
endsnippet

snippet rerrs "ROS_ERROR_STREAM"
ROS_ERROR_STREAM($0)
endsnippet

snippet rfat "ROS_FATAL"
ROS_FATAL($0)
endsnippet

snippet rfats "ROS_FATAL_STREAM"
ROS_FATAL_STREAM($0)
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H_','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}`!p
get_left_curly_brace_style(snip)`
public:
	$1();
	virtual ~$1();

private:
	$3
};

#endif  // $2
endsnippet

snippet incio "#include <iostream>" b
#include <iostream>
endsnippet

snippet incvec "#include <vector>" b
#include <vector>
endsnippet

snippet incarr "#include <array>" b
#include <array>
endsnippet

snippet incls "#include <list>" b
#include <list>
endsnippet

snippet incal "#include <algorithm>" b
#include <algorithm>
endsnippet

snippet incstr "#include <string>" b
#include <string>
endsnippet

snippet incmap "#include <map>" b
#include <map>
endsnippet

snippet incexc "#include <stdexcept>" b
#include <stdexcept>
endsnippet

snippet incmem "#include <memory>" b
#include <memory>
endsnippet

snippet incros "#include <ros/ros.h>" b
#include <ros/ros.h>
endsnippet

snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

snippet try "try {} catch {}" b
try`!p get_left_curly_brace_style(snip)`
	${VISUAL}
`!p get_right_curly_brace_style(snip, "catch")` (${2:std::runtime_error err})`!p
get_left_curly_brace_style(snip)`
	$0
}
endsnippet

snippet forr "range for {}" b
for (auto${4:& ${1:i}} : ${2:container})`!p get_left_curly_brace_style(snip)`
	$3
}
endsnippet

snippet forrs "range for" b
for (auto${4:& ${1:i}} : ${2:container})
	$3
endsnippet
# vim:ft=snippets:
