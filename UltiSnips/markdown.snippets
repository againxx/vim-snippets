# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

priority -50

global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
HatSequence = r"\overline \bar \hat \tilde \widetilde \widehat".split()
LeftArrows = r"\leftarrow|\longleftarrow|\Leftarrow|\Longleftarrow".split("|")
RightArrows = r"\rightarrow|\longrightarrow|\Rightarrow|\Longrightarrow".split("|")
LeftrightArrows = ["\\" + x for x in "leftrightarrow|longleftrightarrow|Leftrightarrow|Longleftrightarrow|iff".split("|")]
# UnescapedAlphabet = ['\a', '\b', '\f', '\n', '\r', '\t']
# EscapedAlphabet = ['\\a', '\\b', '\\f', '\\n', '\\r', '\\t']

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False

def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip().split("x",1)
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])

	# erase current line
	snip.buffer[snip.line] = ''

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = ' | '.join(['$' + str(col) for col in range(1,columns_amount+1)]) + "\n"
	anon_snippet_delimiter = ':-|' * (columns_amount-1) + ":-\n"
	anon_snippet_body = ""
	for row in range(1,rows_amount+1):
		anon_snippet_body += ' | '.join(['$' + str(row*columns_amount+col) for col in range(1,columns_amount+1)]) + "\n"
	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)
endglobal

################
# Common stuff #
################
snippet link "Link to something"
[${1:${VISUAL:Text}}](${3:http://${2:www.url.com}})$0
endsnippet

snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

snippet refl "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:http://${3:www.url.com}} "${5:$4}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

post_jump "create_table(snip)"
snippet "tb(\d+x\d+)" "Customizable table" br
`!p snip.rv = match.group(1)`
endsnippet

########
# Math #
########
context "math()"
snippet align "aligned env" b
\begin{aligned}
	${VISUAL}$0
\end{aligned}
endsnippet

context "math()"
snippet gather "gathered env" b
\begin{gathered}
	${VISUAL}$0
\end{gathered}
endsnippet

context "math()"
snippet cases "cases env" b
\begin{cases}
	${VISUAL}$0
\end{cases}
endsnippet

context "math()"
snippet array "array env" b
\begin{array}{${1:c}}
	${VISUAL}$0
\end{array}
endsnippet

context "math()"
snippet mat "matrix env" b
\begin{matrix}
	${VISUAL}$0
\end{matrix}
endsnippet

context "math()"
snippet pmat "pmatrix env (" b
\begin{pmatrix}
	${VISUAL}$0
\end{pmatrix}
endsnippet

context "math()"
snippet bmat "bmatrix env [" b
\begin{bmatrix}
	${VISUAL}$0
\end{bmatrix}
endsnippet

context "math()"
snippet Bmat "Bmatrix env {" b
\begin{Bmatrix}
	${VISUAL}$0
\end{Bmatrix}
endsnippet

context "math()"
snippet vmat "vmatrix env |" b
\begin{vmatrix}
	${VISUAL}$0
\end{vmatrix}
endsnippet

context "math()"
snippet Vmat "Vmatrix env ||" b
\begin{Vmatrix}
	${VISUAL}$0
\end{Vmatrix}
endsnippet

context "math()"
snippet smat "smallmatrix env" i
\begin{smallmatrix} $0 \end{smallmatrix}
endsnippet

context "math()"
snippet ... "ldots" iA
\ldots 
endsnippet

context "math()"
snippet => "implies" Ai
\implies 
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby 
endsnippet

context "math()"
snippet -> "rightarrow" Ai
\\rightarrow 
endsnippet

context "math()"
snippet -< "leftarrow" Ai
\leftarrow 
endsnippet

context "math()"
snippet >= "leq" Ai
\leq 
endsnippet

context "math()"
snippet <= "geq" Ai
\geq 
endsnippet

context "math()"
snippet != "neq" Ai
\\neq 
endsnippet

context "math()"
snippet ** "times" Ai
\\times 
endsnippet

context "math()"
snippet lim "lim" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limits "limits" w
\lim\limits_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1) + '_' + match.group(2)`$0
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2) + '}'`
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

priority 100
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1) + '}'`{$1}$0
endsnippet

# priority 1000
# context "math()"
# snippet '^.*\)/' "() frac" wrA
# `!p
# stripped = match.string[:-1]
# for unesc_char, esc_char in zip(UnescapedAlphabet, EscapedAlphabet):
# 	stripped = stripped.replace(unesc_char, esc_char)

# depth = 0
# i = len(stripped) - 1
# while True:
# 	if stripped[i] == ')': depth += 1
# 	if stripped[i] == '(': depth -= 1
# 	if depth == 0: break;
# 	i-=1
# snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
# `{$1}$0
# endsnippet

priority 1000
context "math()"
snippet '^(.*\))(\^\d|\^{[^{}]+})/' "()^2 frac" wrA
`!p
stripped = match.group(1)
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i:] + match.group(2) + "}"
`{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# vim:ft=snippets:
